syntax = "proto3";

package leancode.contracts;

option csharp_namespace = "LeanCode.ContractsGenerator";

enum KnownType {
  Object = 0;
  String = 1;
  Guid = 3;
  Uri = 4;
  Boolean = 5;
  UInt8 = 100;
  Int8 = 101;
  Int16 = 102;
  UInt16 = 103;
  Int32 = 104;
  UInt32 = 105;
  Int64 = 106;
  UInt64 = 107;
  Float = 150;
  Double = 151;
  Decimal = 152;
  Date = 200;
  Time = 201;
  DateTime = 202;
  DateTimeOffset = 203;
  TimeSpan = 204;
  Array = 300;
  Map = 301;
  Query = 1000;
  Command = 1001;
  AuthorizeWhenAttribute = 1002;
  AuthorizeWhenHasAnyOfAttribute = 1003;
  QueryCacheAttribute = 1004;
  Attribute = 1005;
}

message ValueRef {
  message Null {}

  message Number { int64 value = 1; }
  message FloatingPointNumber { double value = 1; }
  message String { string value = 1; }
  message Boolean { bool value = 1; }
  oneof value {
    Null null = 1;
    Number number = 2;
    FloatingPointNumber floatingPoint = 3;
    String string = 4;
    Boolean bool = 5;
  }
}

message TypeRef {
  message Generic { string name = 1; }
  message Internal {
    string name = 1;
    repeated TypeRef arguments = 2;
  }
  message Known {
    KnownType type = 1;
    repeated TypeRef arguments = 2;
  }

  bool nullable = 1;
  oneof type {
    Generic generic = 2;
    Internal internal = 3;
    Known known = 4;
  }
}

message GenericParameter { string name = 1; }

message AttributeArgument {
  message Positional {
    int32 position = 1;
    ValueRef value = 2;
  }
  message Named {
    string name = 1;
    ValueRef value = 2;
  }
  oneof attribute {
    Positional positional = 1;
    Named named = 2;
  }
}

message AttributeRef {
  string attributeName = 1;
  repeated AttributeArgument argument = 2;
}

message PropertyRef {
  TypeRef type = 1;
  string name = 2;
  repeated AttributeRef attributes = 3;
  string comment = 4;
}

message ConstantRef {
  string name = 1;
  ValueRef value = 2;
  string comment = 3;
}

message EnumValue {
  string name = 1;
  int64 value = 2;
  string comment = 3;
}

message ErrorCode {
  message Single {
    string name = 1;
    int32 code = 2;
  }
  message Group {
    string name = 1;
    string groupId = 2;
    repeated ErrorCode innerCodes = 3;
  }
  oneof code {
    Single single = 1;
    Group group = 2;
  }
}

message TypeDescriptor {
  repeated TypeRef extends = 1;
  repeated GenericParameter genericParameters = 2;
  repeated PropertyRef properties = 3;
  repeated ConstantRef constants = 4;
}

message Statement {
  message DTO { TypeDescriptor typeDescriptor = 1; }

  message Enum { repeated EnumValue members = 1; }
  message Query {
    TypeDescriptor typeDescriptor = 1;
    TypeRef returnType = 2;
  }
  message Command {
    TypeDescriptor typeDescriptor = 1;
    repeated ErrorCode errorCodes = 2;
  }
  string name = 1;
  string comment = 2;
  repeated AttributeRef attributes = 3;
  oneof content {
    DTO dto = 10;
    Enum enum = 11;
    Query query = 12;
    Command command = 13;
  }
}

message Export {
  string projectName = 1;
  repeated Statement statements = 2;
  repeated ErrorCode.Group knownErrorGroups = 3;
}
